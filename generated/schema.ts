// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Count extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Count entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Count entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Count", id.toString(), this);
    }
  }

  static load(id: string): Count | null {
    return changetype<Count | null>(store.get("Count", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }
}

export class Sticker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("hash", Value.fromString(""));
    this.set("tags", Value.fromString(""));
    this.set("votes", Value.fromBigInt(BigInt.zero()));
    this.set("created_at", Value.fromBigInt(BigInt.zero()));
    this.set("upvoted_at", Value.fromBigInt(BigInt.zero()));
    this.set("transfered_at", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sticker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Sticker entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Sticker", id.toString(), this);
    }
  }

  static load(id: string): Sticker | null {
    return changetype<Sticker | null>(store.get("Sticker", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): BigInt {
    let value = this.get("token");
    return value!.toBigInt();
  }

  set token(value: BigInt) {
    this.set("token", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get hash(): string {
    let value = this.get("hash");
    return value!.toString();
  }

  set hash(value: string) {
    this.set("hash", Value.fromString(value));
  }

  get tags(): string {
    let value = this.get("tags");
    return value!.toString();
  }

  set tags(value: string) {
    this.set("tags", Value.fromString(value));
  }

  get votes(): BigInt {
    let value = this.get("votes");
    return value!.toBigInt();
  }

  set votes(value: BigInt) {
    this.set("votes", Value.fromBigInt(value));
  }

  get created_at(): BigInt {
    let value = this.get("created_at");
    return value!.toBigInt();
  }

  set created_at(value: BigInt) {
    this.set("created_at", Value.fromBigInt(value));
  }

  get upvoted_at(): BigInt {
    let value = this.get("upvoted_at");
    return value!.toBigInt();
  }

  set upvoted_at(value: BigInt) {
    this.set("upvoted_at", Value.fromBigInt(value));
  }

  get transfered_at(): BigInt {
    let value = this.get("transfered_at");
    return value!.toBigInt();
  }

  set transfered_at(value: BigInt) {
    this.set("transfered_at", Value.fromBigInt(value));
  }
}
